//! There is public traits for `Regex` and `Match` structs generated by `regn`.
//! It allows to interact with multiple instances of those structs outside of
//! place their creation.

pub trait RegexBytes {
    fn match_at<'h>(&self, haystack: &'h [u8], start: usize) -> Option<impl MatchBytes<'h>>;

    fn match_iter<'h>(&self, haystack: &'h [u8]) -> impl Iterator<Item = impl MatchBytes<'h>>;
}

pub trait MatchBytes<'h> {
    fn as_bytes(&self) -> &'h [u8];

    fn start(&self) -> usize;

    fn end(&self) -> usize;

    #[inline]
    fn len(&self) -> usize {
        self.end() - self.start()
    }

    #[inline]
    fn is_empty(&self) -> bool {
        self.start() == self.end()
    }

    #[inline]
    fn range(&self) -> std::ops::Range<usize> {
        self.start()..self.end()
    }
}

pub trait RegexStr {
    fn match_at<'h>(&self, haystack: &'h str, start: usize) -> Option<impl MatchStr<'h>>;

    fn match_iter<'h>(&self, haystack: &'h str) -> impl Iterator<Item = impl MatchStr<'h>>;
}

pub trait MatchStr<'h>: MatchBytes<'h> {
    fn as_str(&self) -> &'h str;
}
